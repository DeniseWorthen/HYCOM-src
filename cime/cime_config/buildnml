#!/usr/bin/env python

"""hycom namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, sys, copy, time
from datetime import datetime

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.namelist import parse
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import expect, safe_copy, symlink_force

logger = logging.getLogger(__name__)

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
###############################################################################
def _create_namelist(case, confdir, config, infile, nmlgen):
###############################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`.
    The `confdir` argument is used to specify the directory  in which output files will be placed.
    """

    # Input data list 
    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "hycom.input_data_list")

    # Initialize namelist defaults
    nmlgen.init_defaults(infile, config)

    # Path for namelist files
    srcroot = case.get_value("SRCROOT")
    namelist_xml_dir = os.path.join(srcroot, "src", "model", "HYCOM", "cime", "cime_config")

    # Create list of groups by querying xml file
    groups = []
    with open(os.path.join(namelist_xml_dir, "namelist_definition_hycom.xml"), 'r') as fin:
        for s in fin.xreadlines():
            if "<group>" in s:
                groups.append(s.replace('<group>', '').replace('</group>', '').strip())

    # Remove duplicates
    groups = list(set(groups))

    # Create namelist
    namelist_file = os.path.join(confdir, "ocn_in")
    #nmlgen.write_output_file(namelist_file, data_list_path, groups=groups, sorted_groups=False)

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################

    # Build the component namelist
    if compname != "hycom":
        raise AttributeError
    srcroot = case.get_value("SRCROOT")
    rundir  = case.get_value("RUNDIR")

    # Determine the confdir directory
    confdir = os.path.join(caseroot,"Buildconf","hycomconf")
    if not os.path.isdir(confdir):
        os.makedirs(confdir)

    # Determine CaseDocs
    casedocsdir = os.path.join(caseroot,"CaseDocs")

    # Path for namelist file
    namelist_xml_dir = os.path.join(srcroot, "src", "model", "HYCOM", "cime", "cime_config")

    # Set namelist definition file
    definition_file = [os.path.join(namelist_xml_dir, "namelist_definition_hycom.xml")]

    # Create namelist_infile using user_nl_file as input
    user_nl_file = os.path.join(caseroot, "user_nl_hycom")
    expect(os.path.isfile(user_nl_file),
           "Missing required user_nl_file %s " %(user_nl_file))
    infile = os.path.join(confdir, "namelist_infile")
    create_namelist_infile(case, user_nl_file, infile)
    namelist_infile = [infile]

    #--------------------------------------------
    # Namelist generator for HYCOM (blkdat.input) 
    #--------------------------------------------

    # Create config dictionary
    config = {}

    # Create the namelist generator object
    nmlgen = NamelistGenerator(case, definition_file)     

    # Create namelist
    _create_namelist(case, confdir, config, namelist_infile, nmlgen)

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "hycom")

if __name__ == "__main__":
    _main_func()
